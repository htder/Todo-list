(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function n(n){e(1,arguments);var o=t(n);return o.setHours(0,0,0,0),o}function o(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function r(n,r){e(1,arguments);var s=r||{},c=s.locale,i=c&&c.options&&c.options.weekStartsOn,a=null==i?0:o(i),l=null==s.weekStartsOn?a:o(s.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=t(n),u=d.getDay(),m=(u<l?7:0)+u-l;return d.setDate(d.getDate()-m),d.setHours(0,0,0,0),d}const s=function(e,t,n,o,r,s){const c={};return c.title=e,c.description=t,c.dueDate=n,c.completed=o,c.priority=r,c.project=s,c.due=function(){return`${e} due: ${n}`},c},c=function(e){const t={};return t.title=e,t},i={tasks:[s("Hello World","one two three","2022-01-21",!0,"high","All"),s("World Hello","one two three","2022-01-20",!1,"low","Project 2"),s("One One One","One Hello","2022-09-17",!0,"middle","Project 2"),s("Two Two Two","Two Hello","2022-01-20",!1,"high","Project 3"),s("Three Three Three","Three Hello","2022-12-25",!1,"high","All")],projects:[c("All"),c("Project 2"),c("Project 3")]};let a=[],l=[];document.querySelector(".sidebar").addEventListener("click",(t=>{if(Array.from(document.querySelectorAll(".menu-button")).forEach((e=>e.classList.remove("active"))),null===t.target.closest("a"))return;t.target.closest("a").classList.add("active");const o=t.target.classList.contains("today"),s=t.target.classList.contains("week");if(t.target.classList.contains("home")&&(p.removeAllTasks(),i.tasks.forEach((e=>p.addTodoToView(e)))),o){const t=[];i.tasks.forEach((o=>{(function(t,o){e(2,arguments);var r=n(t),s=n(o);return r.getTime()===s.getTime()})(new Date(o.dueDate),new Date)&&t.push(o)})),console.log(l),l=t,p.removeAllTasks(),l.forEach((e=>p.addTodoToView(e)))}if(s){const t=[];i.tasks.forEach((n=>{(function(t,n,o){e(2,arguments);var s=r(t,o),c=r(n,o);return s.getTime()===c.getTime()})(new Date(n.dueDate),new Date)&&t.push(n)})),console.log(a),a=t,p.removeAllTasks(),a.forEach((e=>p.addTodoToView(e)))}})),function(){const e=document.querySelector(".project-modal"),t=document.querySelector(".new-project-button"),n=document.querySelector(".project-modal-close"),o=document.querySelector(".project-submit"),r=document.getElementById("new-project-form");t.addEventListener("click",(()=>{s()})),n.addEventListener("click",(()=>{a()})),o.addEventListener("click",(e=>{e.preventDefault();const t=r.title;if(d.checkTitle(t)){const e=c(t.value);i.projects.push(e),u.addProjectToView(e),d.clearForm(r),a()}}));const s=function(){e.classList.remove("hide"),e.classList.add("show")},a=function(){e.classList.remove("show"),e.classList.add("hide")}}();const d={checkTitle:e=>{let t=!1;return""===e.value.trim()?e.classList.add("error"):(e.classList.remove("error"),t=!0),t},clearForm:e=>{e.title.value=""}},u=function(){const e=document.querySelector(".project-menu"),t=document.querySelector(".form-project-selector");return{addProjectToView:t=>{e.appendChild((e=>{const t=`\n      <a href="#" class="nav-link menu-button link-dark rounded">\n        <img\n          class="bi me-2"\n          width="16"\n          height="16"\n          src="../icons/arrow-right-short.svg"\n        /><span class="d-none d-sm-inline">${e.title}</span></a\n      >`,n=document.createElement("li");return n.classList="nav-item m-1",n.innerHTML=t,n})(t))},addProjectToTodoSelectorForm:()=>{let e="";i.projects.forEach((t=>{e+=`<option>${t.title}</option>`})),t.innerHTML=e}}}(),m=(function(){const e=document.querySelector(".task-modal"),t=document.querySelector(".todo-new-task"),n=document.querySelector(".todo-modal-close"),o=document.getElementById("new-todo-form"),r=document.querySelector(".todo-submit");console.log(t),t.addEventListener("click",(()=>{u.addProjectToTodoSelectorForm(),c()})),n.addEventListener("click",(()=>{a()})),r.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector(".form-project-selector"),n=o.title,r=o.description,c=o.dueDate,l=t.options[t.selectedIndex].value,d=o.optradio.value;let u=m.checkTitle(n),h=m.checkDescription(r),f=m.checkDate(c);if(u&&h&&f){const e=s(n.value,r.value,c.value,!1,d,l);i.tasks.push(e),p.addTodoToView(e),m.clearForm(o),a()}}));const c=()=>{e.classList.remove("hide"),e.classList.add("show")},a=()=>{e.classList.remove("show"),e.classList.add("hide")}}(),function(){const e=e=>""===e,t=(e,t)=>{document.querySelector(".dateError").textContent=t};return{checkTitle:t=>{let n=!1;const o=t.value.trim();return e(o)?("Title cannot be empty.",document.querySelector(".titleError").textContent="Title cannot be empty."):(document.querySelector(".titleError").textContent="",n=!0),n},checkDescription:t=>{let n=!1;const o=t.value.trim();return e(o)?("Description cannot be empty.",document.querySelector(".descError").textContent="Description cannot be empty."):(document.querySelector(".descError").textContent="",n=!0),n},checkDate:n=>{let o=!1;const r=n.value.trim();return e(r)&&t(0,"Due date cannot be empty"),(e=>{const t=new Date(`${e}`),[n,o,r]=e.split("-"),s=new Date,c=s.getDate(),i=s.getMonth()+1;return!(+n===s.getFullYear()&&+o===i&&+r===c||t>s)})(r)?t(0,"Due date must be in the future."):(document.querySelector(".dateError").textContent="",o=!0),o},clearForm:e=>{e.title.value="",e.description.value="",e.dueDate.value=""}}}()),p=function(){const e=document.querySelector(".todo-container");return{addTodoToView:t=>{e.appendChild((e=>{const t=`\n    <div\n    class="col-md-1 py-1 d-flex justify-content-md-end justify-content-center"\n  >\n    <input type="checkbox" class="task-checkbox" ${e.completed?"checked":""}/>\n  </div>\n  <div\n    class="col-md-6 d-flex align-items-center justify-content-md-start justify-content-center"\n  >\n    ${e.completed?`<del>${e.title}</del>`:`${e.title}`}\n  </div>\n    <div\n        class="col-md-1 d-flex align-items-center justify-md-start justify-content-center task-arrow"\n         >\n        <img\n         class="task-arrow-image-down"\n         width="16"\n         height="16"\n         src="../icons/caret-down.svg"\n         />\n    </div>\n  <div\n    class="col-md-2 d-flex align-items-center justify-content-md-start justify-content-center"\n  >\n    ${e.dueDate}\n  </div>\n  <div\n    class="col-md-1 d-flex align-items-center justify-md-start justify-content-center"\n  >\n      <img\n        class="task-edit"\n        width="16"\n        height="16"\n        src="../icons/pencil-square.svg"\n      />\n\n  </div>\n  <div\n    class="col-md-1 d-flex align-items-center justify-md-start justify-content-center"\n  >\n      <img\n        class="task-delete"\n        width="16"\n        height="16"\n        src="../icons/trash.svg"\n      />\n  </div>`,n=document.createElement("div");return n.classList="row m-4 p-2 bg-white rounded-3 border-bottom  "+("high"===e.priority?"red-border":"middle"===e.priority?"orange-border":"green-border"),n.innerHTML=t,n})(t))},removeAllTasks:()=>{for(;e.firstChild;)e.removeChild(e.lastChild)}}}(),h=(function(){document.querySelector(".todo-main-container").addEventListener("click",(o=>{const r=o.target.classList.contains("task-checkbox"),s=o.target.classList.contains("task-arrow-image-down")||o.target.classList.contains("task-arrow-image-up"),c=o.target.classList.contains("task-edit"),a=o.target.classList.contains("task-delete");if(r){const e=Array.from(o.target.parentNode.parentNode.childNodes),t=e[3].textContent.trim(),n=e[7].textContent.trim(),r=i.tasks.filter((e=>e.title===t&&e.dueDate===n));r[0].completed=!r[0].completed,r[0].completed?e[3].innerHTML=`<del>${e[3].innerHTML}</del>`:e[3].innerHTML=e[3].innerHTML.replace(/(<([^>]+)>)/gi,"")}if(s){let r,s,c;if(o.target.classList.contains("task-arrow-image-down")){const t=Array.from(o.target.parentNode.parentNode.childNodes);let a=o.target.parentNode;c=o.target.parentNode.parentNode,console.log(t),console.log(c),r=t[3].textContent.trim(),s=t[7].textContent.trim(),a.innerHTML=e(),console.log(r,s);const l=i.tasks.filter((e=>e.title===r&&e.dueDate===s));console.log(l);const d=n(l);c.insertAdjacentElement("afterend",d)}if(o.target.classList.contains("task-arrow-image-up")){const e=Array.from(o.target.parentNode.parentNode.childNodes);let n=o.target.parentNode;c=o.target.parentNode.parentNode,r=e[3].textContent.trim(),s=e[7].textContent.trim(),n.innerHTML=t(),c.nextElementSibling.remove()}}if(c){const e=Array.from(o.target.parentNode.parentNode.childNodes);let t=e[3].textContent.trim(),n=e[7].textContent.trim();const r=i.tasks.filter((e=>e.title===t&&e.dueDate===n));console.log(r),h.fillForm(r),h.open()}if(a){const e=Array.from(o.target.parentNode.parentNode.childNodes);let t=e[3].textContent.trim(),n=e[7].textContent.trim();const r=i.tasks.filter((e=>e.title===t&&e.dueDate===n));let s;i.tasks.filter(((e,t)=>{r[0].title===e.title&&r[0].description===e.description&&r[0].dueDate===e.dueDate&&(s=t)})),i.tasks.splice(s,1),p.removeAllTasks(),i.tasks.forEach((e=>p.addTodoToView(e)))}}));const e=()=>'\n    <img\n        class="task-arrow-image-up"\n        width="16"\n        height="16"\n        src="../icons/caret-up.svg"\n    />',t=()=>'\n    <img\n        class="task-arrow-image-down"\n        width="16"\n        height="16"\n        src="../icons/caret-down.svg"\n    />',n=e=>{console.log(e);const t=`\n    <div class="container-fluid py-1">\n      <h6 class="fw-bold">Description</h6>\n      <p class="">\n      ${e[0].description}\n      </p>\n  </div>`,n=document.createElement("div");return n.classList="modal-body mx-5 my-3 bg-light rounded-3 border border-secondary p-3 rounded-3 description-div",n.innerHTML=t,n}}(),function(){const e=document.querySelector(".edit-modal"),t=document.getElementById("edit-modal-form"),n=document.querySelector(".edit-submit"),o=document.querySelector(".edit-cancel");let r;const c=()=>{e.classList.remove("show"),e.classList.add("hide")};return o.addEventListener("click",(()=>{m.clearForm(t),c()})),n.addEventListener("click",(e=>{console.log(r),e.preventDefault();const n=t.title,o=t.description,a=t.dueDate;let l=m.checkTitle(n),d=m.checkDescription(o),u=m.checkDate(a);if(l&&d&&u){const e=s(n.value,o.value,a.value,r.completed,r.priority,r.project);let l;i.tasks.filter(((e,t)=>{r[0].title===e.title&&r[0].description===e.description&&r[0].dueDate===e.dueDate&&(l=t)})),i.tasks.splice(l,1,e),m.clearForm(t),p.removeAllTasks(),i.tasks.forEach((e=>p.addTodoToView(e))),c()}})),{open:()=>{e.classList.remove("hide"),e.classList.add("show")},close:c,fillForm:e=>{r=e,console.log(r),t.title.value=e[0].title,t.description.value=e[0].description,t.dueDate.value=e[0].dueDate}}}());i.projects.forEach((e=>u.addProjectToView(e))),i.tasks.forEach((e=>p.addTodoToView(e)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,