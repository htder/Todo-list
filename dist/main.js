(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var o=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===o?new Date(t.getTime()):"number"==typeof t||"[object Number]"===o?new Date(t):("string"!=typeof t&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(o){e(1,arguments);var n=t(o);return n.setHours(0,0,0,0),n}function n(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function r(o,r){e(1,arguments);var s=r||{},c=s.locale,a=c&&c.options&&c.options.weekStartsOn,i=null==a?0:n(a),l=null==s.weekStartsOn?i:n(s.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=t(o),u=d.getDay(),m=(u<l?7:0)+u-l;return d.setDate(d.getDate()-m),d.setHours(0,0,0,0),d}const s=function(e,t,o,n,r,s){const c={};return c.title=e,c.description=t,c.dueDate=o,c.completed=n,c.priority=r,c.project=s,c.due=function(){return`${e} due: ${o}`},c},c=function(e){const t={};return t.title=e,t};let a={tasks:[s("Hello World","one two three","2022-01-21",!0,"high","Starter"),s("World Hello","one two three","2022-01-20",!1,"low","Starter"),s("One One One","One Hello","2022-09-17",!0,"middle","Starter")],projects:[c("Starter")]};const i={writeStorage:function(){window.localStorage.setItem("model",JSON.stringify(a))},readStorage:function(){window.localStorage.getItem("model")&&(a=JSON.parse(window.localStorage.getItem("model")))},resetStorage:function(){localStorage.setItem("model",JSON.stringify(a))}};i.readStorage();let l=[],d=[],u=[];function m(){Array.from(document.querySelectorAll(".menu-button")).forEach((e=>e.classList.remove("active")))}document.querySelector(".sidebar").addEventListener("click",(t=>{if(m(),null===t.target.closest("a"))return;t.target.closest("a").classList.add("active");const n=t.target.classList.contains("today"),s=t.target.classList.contains("week"),c=t.target.classList.contains("home"),i=t.target.classList.contains("project");if(c&&(h.removeAllTasks(),a.tasks.forEach((e=>h.addTodoToView(e)))),n){const t=[];a.tasks.forEach((n=>{(function(t,n){e(2,arguments);var r=o(t),s=o(n);return r.getTime()===s.getTime()})(new Date(n.dueDate),new Date)&&t.push(n)})),d=t,h.removeAllTasks(),d.forEach((e=>h.addTodoToView(e)))}if(s){const t=[];a.tasks.forEach((o=>{(function(t,o,n){e(2,arguments);var s=r(t,n),c=r(o,n);return s.getTime()===c.getTime()})(new Date(o.dueDate),new Date)&&t.push(o)})),l=t,h.removeAllTasks(),l.forEach((e=>h.addTodoToView(e)))}if(i){const e=t.target.closest(".nav-item").lastChild.childNodes[2].textContent;console.log(e);const o=[];a.tasks.forEach((t=>{t.project===e&&o.push(t)})),u=o,h.removeAllTasks(),u.forEach((e=>h.addTodoToView(e)))}})),function(){const e=document.querySelector(".project-modal"),t=document.querySelector(".new-project-button"),o=document.querySelector(".project-modal-close"),n=document.querySelector(".project-submit"),r=document.getElementById("new-project-form");t.addEventListener("click",(()=>{s()})),o.addEventListener("click",(()=>{l()})),n.addEventListener("click",(e=>{e.preventDefault();const t=r.title;if(p.checkTitle(t)){const e=c(t.value);a.projects.push(e),g.addProjectToView(e),p.clearForm(r),i.writeStorage(),l()}}));const s=function(){e.classList.remove("hide"),e.classList.add("show")},l=function(){e.classList.remove("show"),e.classList.add("hide")}}();const p={checkTitle:e=>{let t=!1;return""===e.value.trim()?e.classList.add("error"):(e.classList.remove("error"),t=!0),t},clearForm:e=>{e.title.value=""}},g=function(){const e=document.querySelector(".project-menu"),t=document.querySelector(".form-project-selector");return{addProjectToView:t=>{e.appendChild((e=>{const t=`\n      <a href="#" class="nav-link menu-button link-dark rounded project">\n        <img\n          class="bi me-2 project"\n          width="16"\n          height="16"\n          src="../icons/arrow-right-short.svg"\n        /><span class="d-none d-sm-inline project">${e.title}</span></a\n      >`,o=document.createElement("li");return o.classList="nav-item m-1",o.innerHTML=t,o})(t))},addProjectToTodoSelectorForm:()=>{let e="";a.projects.forEach((t=>{e+=`<option>${t.title}</option>`})),t.innerHTML=e}}}(),f=(function(){const e=document.querySelector(".task-modal"),t=document.querySelector(".todo-new-task"),o=document.querySelector(".todo-modal-close"),n=document.getElementById("new-todo-form"),r=document.querySelector(".todo-submit");t.addEventListener("click",(()=>{g.addProjectToTodoSelectorForm(),c()})),o.addEventListener("click",(()=>{l()})),r.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector(".form-project-selector"),o=n.title,r=n.description,c=n.dueDate,d=t.options[t.selectedIndex].value,u=n.optradio.value;let m=f.checkTitle(o),p=f.checkDescription(r),g=f.checkDate(c);if(m&&p&&g){const e=s(o.value,r.value,c.value,!1,u,d);a.tasks.push(e),h.addTodoToView(e),f.clearForm(n),i.writeStorage(),l()}}));const c=()=>{e.classList.remove("hide"),e.classList.add("show")},l=()=>{e.classList.remove("show"),e.classList.add("hide")}}(),function(){const e=e=>""===e,t=(e,t)=>{document.querySelector(".dateError").textContent=t};return{checkTitle:t=>{let o=!1;const n=t.value.trim();return e(n)?("Title cannot be empty.",document.querySelector(".titleError").textContent="Title cannot be empty."):(document.querySelector(".titleError").textContent="",o=!0),o},checkDescription:t=>{let o=!1;const n=t.value.trim();return e(n)?("Description cannot be empty.",document.querySelector(".descError").textContent="Description cannot be empty."):(document.querySelector(".descError").textContent="",o=!0),o},checkDate:o=>{let n=!1;const r=o.value.trim();return e(r)&&t(0,"Due date cannot be empty"),(e=>{const t=new Date(`${e}`),[o,n,r]=e.split("-"),s=new Date,c=s.getDate(),a=s.getMonth()+1;return!(+o===s.getFullYear()&&+n===a&&+r===c||t>s)})(r)?t(0,"Due date must be in the future."):(document.querySelector(".dateError").textContent="",n=!0),n},clearForm:e=>{e.title.value="",e.description.value="",e.dueDate.value=""}}}()),h=function(){const e=document.querySelector(".todo-container");return{addTodoToView:t=>{e.appendChild((e=>{const t=`\n    <div\n    class="col-md-1 py-1 d-flex justify-content-md-end justify-content-center"\n  >\n    <input type="checkbox" class="task-checkbox" ${e.completed?"checked":""}/>\n  </div>\n  <div\n    class="col-md-6 d-flex align-items-center justify-content-md-start justify-content-center"\n  >\n    ${e.completed?`<del>${e.title}</del>`:`${e.title}`}\n  </div>\n    <div\n        class="col-md-1 d-flex align-items-center justify-md-start justify-content-center task-arrow"\n         >\n        <img\n         class="task-arrow-image-down"\n         width="16"\n         height="16"\n         src="../icons/caret-down.svg"\n         />\n    </div>\n  <div\n    class="col-md-2 d-flex align-items-center justify-content-md-start justify-content-center"\n  >\n    ${e.dueDate}\n  </div>\n  <div\n    class="col-md-1 d-flex align-items-center justify-md-start justify-content-center"\n  >\n      <img\n        class="task-edit"\n        width="16"\n        height="16"\n        src="../icons/pencil-square.svg"\n      />\n\n  </div>\n  <div\n    class="col-md-1 d-flex align-items-center justify-md-start justify-content-center"\n  >\n      <img\n        class="task-delete"\n        width="16"\n        height="16"\n        src="../icons/trash.svg"\n      />\n  </div>`,o=document.createElement("div");return o.classList="row m-4 p-2 bg-white rounded-3 border-bottom  "+("high"===e.priority?"red-border":"middle"===e.priority?"orange-border":"green-border"),o.innerHTML=t,o})(t))},removeAllTasks:()=>{for(;e.firstChild;)e.removeChild(e.lastChild)}}}(),v=(function(){document.querySelector(".todo-main-container").addEventListener("click",(n=>{const r=n.target.classList.contains("task-checkbox"),s=n.target.classList.contains("task-arrow-image-down")||n.target.classList.contains("task-arrow-image-up"),c=n.target.classList.contains("task-edit"),l=n.target.classList.contains("task-delete"),d=document.querySelector(".home-active");if(r){const e=Array.from(n.target.parentNode.parentNode.childNodes),t=e[3].textContent.trim(),o=e[7].textContent.trim(),r=a.tasks.filter((e=>e.title===t&&e.dueDate===o));r[0].completed=!r[0].completed,r[0].completed?e[3].innerHTML=`<del>${e[3].innerHTML}</del>`:e[3].innerHTML=e[3].innerHTML.replace(/(<([^>]+)>)/gi,""),i.writeStorage()}if(s){let r,s,c;if(n.target.classList.contains("task-arrow-image-down")){const t=Array.from(n.target.parentNode.parentNode.childNodes);let i=n.target.parentNode;c=n.target.parentNode.parentNode,console.log(t),console.log(c),r=t[3].textContent.trim(),s=t[7].textContent.trim(),i.innerHTML=e(),console.log(r,s);const l=a.tasks.filter((e=>e.title===r&&e.dueDate===s));console.log(l);const d=o(l);c.insertAdjacentElement("afterend",d)}if(n.target.classList.contains("task-arrow-image-up")){const e=Array.from(n.target.parentNode.parentNode.childNodes);let o=n.target.parentNode;c=n.target.parentNode.parentNode,r=e[3].textContent.trim(),s=e[7].textContent.trim(),o.innerHTML=t(),c.nextElementSibling.remove()}}if(c){const e=Array.from(n.target.parentNode.parentNode.childNodes);console.log(e);let t=e[3].textContent.trim(),o=e[7].textContent.trim();const r=a.tasks.filter((e=>e.title===t&&e.dueDate===o));console.log(r),v.fillForm(r),v.open()}if(l){const e=Array.from(n.target.parentNode.parentNode.childNodes);let t=e[3].textContent.trim(),o=e[7].textContent.trim();const r=a.tasks.filter((e=>e.title===t&&e.dueDate===o));let s;a.tasks.filter(((e,t)=>{r[0].title===e.title&&r[0].description===e.description&&r[0].dueDate===e.dueDate&&(s=t)})),a.tasks.splice(s,1),m(),d.classList.add("active"),h.removeAllTasks(),a.tasks.forEach((e=>h.addTodoToView(e))),i.writeStorage()}}));const e=()=>'\n    <img\n        class="task-arrow-image-up"\n        width="16"\n        height="16"\n        src="../icons/caret-up.svg"\n    />',t=()=>'\n    <img\n        class="task-arrow-image-down"\n        width="16"\n        height="16"\n        src="../icons/caret-down.svg"\n    />',o=e=>{console.log(e);const t=`\n    <div class="container-fluid py-1">\n      <h6 class="fw-bold">Description</h6>\n      <p class="">\n      ${e[0].description}\n      </p>\n  </div>`,o=document.createElement("div");return o.classList="modal-body mx-5 my-3 bg-light rounded-3 border border-secondary p-3 rounded-3 description-div",o.innerHTML=t,o}}(),function(){const e=document.querySelector(".edit-modal"),t=document.getElementById("edit-modal-form"),o=document.querySelector(".edit-submit"),n=document.querySelector(".edit-cancel"),r=document.querySelector(".home-active");let c;const l=()=>{e.classList.remove("show"),e.classList.add("hide")};return n.addEventListener("click",(()=>{f.clearForm(t),l()})),o.addEventListener("click",(e=>{console.log(c),e.preventDefault();const o=t.title,n=t.description,d=t.dueDate;let u=f.checkTitle(o),p=f.checkDescription(n),g=f.checkDate(d);if(u&&p&&g){console.log(c);const e=s(o.value,n.value,d.value,c[0].completed,c[0].priority,c[0].project);let u;console.log(e),a.tasks.filter(((e,t)=>{c[0].title===e.title&&c[0].description===e.description&&c[0].dueDate===e.dueDate&&(u=t)})),a.tasks.splice(u,1,e),f.clearForm(t),m(),r.classList.add("active"),h.removeAllTasks(),a.tasks.forEach((e=>h.addTodoToView(e))),i.writeStorage(),l()}})),{open:()=>{e.classList.remove("hide"),e.classList.add("show")},close:l,fillForm:e=>{c=e,console.log(c),t.title.value=e[0].title,t.description.value=e[0].description,t.dueDate.value=e[0].dueDate}}}());a.projects.forEach((e=>g.addProjectToView(e))),a.tasks.forEach((e=>h.addTodoToView(e)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,